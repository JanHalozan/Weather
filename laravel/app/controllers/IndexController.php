<?php/** * Created by PhpStorm. * User: janhalozan * Date: 4/15/14 * Time: 2:37 PM * * Route: / * Model: <none - yet> * * */class IndexController extends BaseController {    //This is the default action    public function index()     {        $view = View::make('index');        if (Cookie::get('city_id'))        {            $city = Cities::find(Cookie::get('city_id'));        }        else //There is no city in the cookie yet, get an approximate user location        {            $ip = $_SERVER['REMOTE_ADDR'];            $url = "https://freegeoip.net/xml/" . $ip;            $ch = curl_init();            curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE);            curl_setopt($ch, CURLOPT_HEADER, false);            curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);            curl_setopt($ch, CURLOPT_URL, $url);            curl_setopt($ch, CURLOPT_REFERER, $url);            curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);            $response = curl_exec($ch);            $status = curl_getinfo($ch, CURLINFO_HTTP_CODE);            curl_close($ch);            if ($status == 200)            {            $dom = new DOMDocument('1.0', 'utf-8');            @$dom->loadHTML($response);            $xPath = new DomXPath($dom);            //TODO check query correctness                $lat = $xPath->query('//Latitude')->item(0)->nodeValue;                $lon = $xPath->query('//Longitude')->item(0)->nodeValue;                $city = Cities::findNearest($lat, $lon);                Cookie::forever('city_id', $city->id);            }            else            {                $view->message = "We were unable to find a nearby location, using Maribor as a fallback.";            }            //TODO find maribor or make sure that it will always be the first one or change the message            $city = Cities::first();        }        //TODO use the place in temperature query        $place = $city->name;        //TEMPERATURE        $record = CurrentWeather::first()->temperature;        $view->temperature = round($record);        //FACT        try        {            $randomFact = rand(0, 127);            $lastFactId = Facts::orderBy('id', 'desc')->first()->id;            $view->fact = Facts::find($lastFactId - $randomFact)->fact;        }        catch (Exception $e)        {            $view->fact = "That our random fact feature is not working.";        }        if (Session::get('message'))            $view->message = Session::get('message');        return $view;    }}